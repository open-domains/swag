openapi: 3.0.0
info:
  title: Open-Domains API
  description: API for managing domains and checking domain existence
  version: 1.0.0
servers:
  - url: https://api.open-domains.net
paths:
  /check:
    get:
      summary: Check if a domain exists
      description: |
        Check if a domain exists.
      parameters:
        - in: query
          name: domain
          required: true
          description: Domain to check
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  exists:
                    type: boolean
                    example: true
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid domain"

  /user/domains:
    get:
      summary: List all domains on account
      description: |
        Retrieve a list of all domains associated with the user's account.
      security:
        - apiKeyAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: example.com
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"

  /domain:
    post:
      summary: Create a new domain
      description: |
        Create a new domain and associate it with the user's account.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                domain:
                  type: string
                  example: example.com
                recordType:
                  type: string
                  enum: [A, AAAA, CNAME, MX, TXT]
                  example: A
                recordData:
                  type: string
                  example: "127.0.0.1"
      security:
        - apiKeyAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Domain example.com created successfully"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Domain already exists"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"

  /domain/{domain}/delete:
    delete:
      summary: Delete a domain
      description: |
        Delete a domain from the account.
      parameters:
        - in: path
          name: domain
          required: true
          description: Domain to delete
          schema:
            type: string
      security:
        - apiKeyAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Domain example.com deleted successfully"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"
        '404':
          description: Domain not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Domain not found"

components:
  securitySchemes:
    apiKeyAuth:
      type: apiKey
      in: header
      name: Authorization
